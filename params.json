{"name":"Salesforce Enterprise API Plugin for CakePHP 2.x","tagline":"Use Cake CRUD methods to manipulate Salesforce Enterprise","body":"CakePHP Salesforce Enterprise Plugin\r\n=========================\r\nA plugin and datasource that allows access to salesforce via CakePHP CRUD methods for Salesforce Enterprise Entities.\r\n\r\nI have decided to release this as Open Source as we are moving away from this method, I can offer basic support for this, if you have any alterations to make please submit a pull request and ill merge it in when I can!\r\n\r\n***\r\n@Requires Force.com / Developer Force PHP Toolkit\r\n\r\n@Requires CakePHP 2.x (Tested on Cake 2.4.3)\r\n\r\n@Requires Enterprise Salesforce\r\n\r\n@Requires APC Enabled (Can be changed in code)\r\n\r\n@Recommended:\r\n\r\n* Your Enterprise WSDL\r\n* Knowledge of Salesforce API Versions\r\n\r\n***\r\n\r\nBackground\r\n----------\r\n\r\nThis plugin was created to allow easy interaction with a Salesforce Enterprise\r\ninstance either by using a WSDL or by automagically fetching the fields for a\r\nspecific entity. It provides a unified method of querying, editing, saving and\r\ndeleting on several (tested) entities (Currently **Contacts**, **Leads** and\r\n**Accounts**), and it **SHOULD** work on all other entities!\r\n\r\n###What does it provide?\r\nBasically it allows you to use standard CakePHP find(), save() and delete()\r\nmethods on models which map to Salesforce Entities. This means that if you\r\nwant to find all users who work for X company you could simply issue this:\r\n\r\n```php\r\n$this->SalesforceContact->find('all', array('conditions' => array('Company' =>\r\n'Acme inc')));\r\n```\r\n\r\nAnd this will return you a lovely standard CakePHP data array which you can\r\nmanipulate and use however you want.\r\n\r\n###Why Is it needed?\r\nSalesforce has a weird way of allowing you to query it's entities, everything\r\nwould be really simple if with SOQL (with salesforce's own flavour of SQL) you\r\ncould simply issue a \"SELECT * FROM Contacts\" - however you cant do this - you\r\nneed to specify which fields you want to select. This is fine if you only use\r\nthe standard fields but probably 95% of all Enterprise instances of Salesforce\r\nhave custom fields implemented.\r\n\r\n###Why is it unique?\r\nSurely it is just a SOAP client I hear you asking? Well yes and no! It uses\r\nthe Developer force toolkit as transport to fetch the items but it does a fair\r\nfew clever things underneath the hood aswell, **Maybe most importantly it\r\nprevents the need for having to pass in a HUGE list of fields to each request\r\nyou want to make to Salesforce or having to create custom queries - it can all\r\nbe done with cakes \"find\" method** the prime of which is the ability to\r\nfunction without a WSDL file. The WSDL file describes your companies data\r\nstructures, it is useful for querying a web service but again the Salesforce\r\none has a few quirks, namely with how it labels specific fields and handles\r\nID's, and because of this getting a CakePHP schema to function properly is a\r\nlittle like smashing your head against a brick wall. \r\n\r\n<!--###Why Am I selling this?\r\nWell the version I used in the project I did was pretty specific to my project\r\nso I have left that one alone but I have created this Plugin to allow it to\r\nhelp other people out, With all of the research and coding of the Datasource\r\nfirst time around I think that this probably took me close on 2 weeks to get\r\nright, I have drawn on that Knowledge and created this simpler version and\r\npackaged it up into a Plugin to hopefully help anyone else that needs a \"drop\r\nin\" Salesforce integration. -->\r\n\r\n\r\n#Installation\r\n\r\n1. Clone the Developerforce PHP toolkit into app/Vendor/salesforce\r\n   you should have a path that looks like app/Vendor/salesforce/soapclient\r\n2. Install this Plugin into app/Plugins/Salesforce\r\n3. Place the following code into database.php\r\n\r\n```php\r\n var $sflive = array(\r\n            'datasource' => 'SalesforceSource',\r\n            'standard_wsdl' => 'enterprise.wsdl.xml',\r\n            'dynamic_mode' => false,\r\n            'my_wsdl' => 'enterprise.wsdl.xml',//optional but recommended\r\n            'username' => 'YourSalesForceUsername',\r\n            'password' => 'YourSFPassword+SecurityToken'\r\n        );\r\n```\r\n4. Download your enterprise.wsdl.xml and place it in app/Config (if you dont plan on using this see \"Development Mode\" below\r\n5. Enable the plugin in your bootstrap.php:\r\n\r\n```php\r\nCakePlugin::load(\r\n        array(\r\n            'Salesforce' => array('bootstrap' => true)\r\n  )\r\n);\r\n```\r\n\r\nOk so that is the basic setup now it needs a little configuration in order to\r\nmatch your Salesforce setup.\r\n\r\nOne of the other quirks of Salesforce is that it has different API versions\r\nthat have different functionality (AND different default fields). This is\r\nwhere you might fall down with it:\r\n\r\n1. First open up your enterprise.wsdl.xml and look in the comments at the top\r\n   for the following lines:\r\n```\r\nSalesforce.com Enterprise Web Services API Version 29.0\r\nGenerated on 2013-11-29 01:39:56 +0000.\r\n```\r\nThat is your API Version!\r\n\r\n2. Now you need to tell the soapclient to use this XML Version:\r\nin the file app/Vendor/salesforce/soapclient/SForceBaseClient.php find the\r\nfollowing lines and ensure they are set to the same API version as the version\r\nabove:\r\n\r\n```php\r\nclass SforceBaseClient {\r\n    protected $sforce;\r\n  protected $sessionId;\r\n  protected $location;\r\n  protected $version = '29.0';\r\n```\r\n\r\n***\r\n##Usage:\r\nSo the usage is fairly simple, There are some examples in\r\napp/Plugin/Salesforce/Controllers/TestController.php but essentially it\r\nis:\r\n\r\n```php\r\n$this->loadModel('Salesforce.SalesforceContact');\r\n$this->SalesforceContact->find('all', array('conditions' => array('Company' =>\r\n'Acme inc')));\r\n```\r\n\r\nor if you want to interact with Accounts\r\n\r\n```php\r\n$this->loadModel('Salesforce.SalesforceAccount');\r\n$this->SalesforceAccount->find('all', array('conditions' => array('Name' =>\r\n'Acme inc')));\r\n```\r\n\r\n##WAIT! I want to interact with something like Contracts\r\nOk so as stated this is untested (Mostly because I dont have any contracts to\r\ntest with) **BUT** there is no reason why this shouldn't work, the plugin is\r\nagnostic of the entity that it is using as it simply issues commands via SOQL\r\nand then processes the return data. I would say that if you can fetch fields\r\nusing the Salesforce Developer Workbench (Google it!) then you can use this to\r\ndo it.\r\n\r\n###How?\r\nThe easiest way would be to just create some new models for the entities you\r\nwant to access in app/Plugin/Salesforce/Model - for example:\r\n######SalesforceContract.php\r\n```php\r\n    App::uses('Salesforce', 'Salesforce.Model');\r\n    App::import('Utility', 'Xml');\r\n    /**\r\n     * Class SalesforceContract\r\n     */\r\n\r\n    class SalesforceContract extends Salesforce {\r\n\r\n        public function __construct($id = false, $table = null, $ds = null) {\r\n            $this->name = \"Contract\";\r\n            parent::__construct($id, $table, $ds);\r\n\r\n        }\r\n    }\r\n?>\r\n```\r\n\r\nThis would then allow you to query the Contract table in Salesforce using\r\n\r\n```php \r\n$this->loadModel('Salesforce.SalesforceContract');\r\n$this->SalesforceContract->find('all', array('conditions' => array('Name' =>\r\n'Acme inc')));\r\n```\r\n\r\n\r\n##Advanced Configuration\r\nSo I have tried to keep this as simple as possible with not much configuration\r\nother than absolutely necessary but the plugin does have a few options:\r\n\r\n###Development Mode\r\nIf you set **dynamic_mode = true** in database.php this will then not use your\r\nWSDL, it will try and create a schema from your Salesforce instance for the\r\nmodel you are using, this isnt 100% foolproof but if you are developing a lot\r\nand people are making changes to your Saleforce instance regularly this will\r\nbe a godsend, mostly because Salesforce gets really pissy when you try and\r\ninclude fields that arent there (Or Omit fields that it thinks you should\r\nhave). \r\n\r\nIt should cache the schema it creates but obviously fetching this schema from\r\nSalesforce takes time so using this on a production server really isnt\r\nrecommended.\r\n\r\nThis is used instead of the \"Standard WSDL\" that is provided by Salesforce -\r\nmostly because that Standard WSDL wont include all of your custom fields!\r\n\r\n\r\nTroubleshooting\r\n---------------\r\n\r\n:I have created new fields and they show in the result array from Salesforce but the value hasn't been updated.\r\n\r\nYou probably haven't downloaded the updated wsdl from Salesforce - if you are using development mode try clearing your cache as it caches the schema.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}